# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: identity/ids/UserDoctorRec.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import bq_field_pb2 as bq__field__pb2
from geo import USState_pb2 as geo_dot_USState__pb2
from person import Person_pb2 as person_dot_Person__pb2
from temporal import Date_pb2 as temporal_dot_Date__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='identity/ids/UserDoctorRec.proto',
  package='bloombox.schema.identity.ids',
  syntax='proto3',
  serialized_pb=_b('\n identity/ids/UserDoctorRec.proto\x12\x1c\x62loombox.schema.identity.ids\x1a\x0e\x62q_field.proto\x1a\x11geo/USState.proto\x1a\x13person/Person.proto\x1a\x13temporal/Date.proto\"\xd9\x03\n\rUserDoctorRec\x12%\n\x02id\x18\x01 \x01(\tB\x19\x8a@\x16ID number/unique code.\x12`\n\x0f\x65xpiration_date\x18\x02 \x01(\x0b\x32\x1b.opencannabis.temporal.DateB*\x8a@\'Expiration date for the recommendation.\x12&\n\x07\x62\x61rcode\x18\x03 \x01(\tB\x15\x8a@\x12Raw barcode value.\x12\\\n\x05state\x18\x04 \x01(\x0e\x32\x1d.opencannabis.geo.usa.USStateB.\x8a@+US state where the recommendation is valid.\x12\x33\n\x07\x63ountry\x18\x05 \x01(\tB\"\x8a@\x1f\x43ountry for the recommendation.\x12)\n\tdoctor_id\x18\x06 \x01(\tB\x16\x8a@\x13\x44octor\'s unique ID.\x12Y\n\x06\x64octor\x18\x07 \x01(\x0b\x32\x1b.opencannabis.person.PersonB,\x8a@)Personal information about the physician.B+\n\x1fio.bloombox.schema.identity.idsH\x01P\x01\xa2\x02\x03\x42\x42Sb\x06proto3')
  ,
  dependencies=[bq__field__pb2.DESCRIPTOR,geo_dot_USState__pb2.DESCRIPTOR,person_dot_Person__pb2.DESCRIPTOR,temporal_dot_Date__pb2.DESCRIPTOR,])




_USERDOCTORREC = _descriptor.Descriptor(
  name='UserDoctorRec',
  full_name='bloombox.schema.identity.ids.UserDoctorRec',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='bloombox.schema.identity.ids.UserDoctorRec.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\026ID number/unique code.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='expiration_date', full_name='bloombox.schema.identity.ids.UserDoctorRec.expiration_date', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\'Expiration date for the recommendation.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='barcode', full_name='bloombox.schema.identity.ids.UserDoctorRec.barcode', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\022Raw barcode value.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='state', full_name='bloombox.schema.identity.ids.UserDoctorRec.state', index=3,
      number=4, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@+US state where the recommendation is valid.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='country', full_name='bloombox.schema.identity.ids.UserDoctorRec.country', index=4,
      number=5, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\037Country for the recommendation.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='doctor_id', full_name='bloombox.schema.identity.ids.UserDoctorRec.doctor_id', index=5,
      number=6, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\023Doctor\'s unique ID.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='doctor', full_name='bloombox.schema.identity.ids.UserDoctorRec.doctor', index=6,
      number=7, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@)Personal information about the physician.')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=144,
  serialized_end=617,
)

_USERDOCTORREC.fields_by_name['expiration_date'].message_type = temporal_dot_Date__pb2._DATE
_USERDOCTORREC.fields_by_name['state'].enum_type = geo_dot_USState__pb2._USSTATE
_USERDOCTORREC.fields_by_name['doctor'].message_type = person_dot_Person__pb2._PERSON
DESCRIPTOR.message_types_by_name['UserDoctorRec'] = _USERDOCTORREC
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

UserDoctorRec = _reflection.GeneratedProtocolMessageType('UserDoctorRec', (_message.Message,), dict(
  DESCRIPTOR = _USERDOCTORREC,
  __module__ = 'identity.ids.UserDoctorRec_pb2'
  # @@protoc_insertion_point(class_scope:bloombox.schema.identity.ids.UserDoctorRec)
  ))
_sym_db.RegisterMessage(UserDoctorRec)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\037io.bloombox.schema.identity.idsH\001P\001\242\002\003BBS'))
_USERDOCTORREC.fields_by_name['id'].has_options = True
_USERDOCTORREC.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\026ID number/unique code.'))
_USERDOCTORREC.fields_by_name['expiration_date'].has_options = True
_USERDOCTORREC.fields_by_name['expiration_date']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\'Expiration date for the recommendation.'))
_USERDOCTORREC.fields_by_name['barcode'].has_options = True
_USERDOCTORREC.fields_by_name['barcode']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\022Raw barcode value.'))
_USERDOCTORREC.fields_by_name['state'].has_options = True
_USERDOCTORREC.fields_by_name['state']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@+US state where the recommendation is valid.'))
_USERDOCTORREC.fields_by_name['country'].has_options = True
_USERDOCTORREC.fields_by_name['country']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\037Country for the recommendation.'))
_USERDOCTORREC.fields_by_name['doctor_id'].has_options = True
_USERDOCTORREC.fields_by_name['doctor_id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\023Doctor\'s unique ID.'))
_USERDOCTORREC.fields_by_name['doctor'].has_options = True
_USERDOCTORREC.fields_by_name['doctor']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@)Personal information about the physician.'))
# @@protoc_insertion_point(module_scope)
