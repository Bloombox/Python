# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
import grpc

from google.protobuf import empty_pb2 as google_dot_protobuf_dot_empty__pb2
from media.v1beta1 import MediaService_Beta1_pb2 as media_dot_v1beta1_dot_MediaService__Beta1__pb2


class MediaStub(object):
  """Specifies the media service, which provides tools for resolving, uploading/updating, and managing rich media data
  associated with various system data points.
  """

  def __init__(self, channel):
    """Constructor.

    Args:
      channel: A grpc.Channel.
    """
    self.Upload = channel.unary_unary(
        '/bloombox.schema.services.media.v1beta1.Media/Upload',
        request_serializer=media_dot_v1beta1_dot_MediaService__Beta1__pb2.UploadMedia.Request.SerializeToString,
        response_deserializer=media_dot_v1beta1_dot_MediaService__Beta1__pb2.UploadMedia.Response.FromString,
        )
    self.Attach = channel.unary_unary(
        '/bloombox.schema.services.media.v1beta1.Media/Attach',
        request_serializer=media_dot_v1beta1_dot_MediaService__Beta1__pb2.AttachMedia.Request.SerializeToString,
        response_deserializer=google_dot_protobuf_dot_empty__pb2.Empty.FromString,
        )


class MediaServicer(object):
  """Specifies the media service, which provides tools for resolving, uploading/updating, and managing rich media data
  associated with various system data points.
  """

  def Upload(self, request, context):
    """Provision a record for a new media item, and update the data attached to that record with an initial value. That
    is, upload and store a new, individual media item.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')

  def Attach(self, request, context):
    """Notify the platform that a piece of recently uploaded/provisioned media is ready to be attached to the underlying
    subject parent (i.e. the product the media is depicting, or the partner/location the media is branding for, and so
    on), in cases where a client must perform followup to upload media to a separate endpoint.
    """
    context.set_code(grpc.StatusCode.UNIMPLEMENTED)
    context.set_details('Method not implemented!')
    raise NotImplementedError('Method not implemented!')


def add_MediaServicer_to_server(servicer, server):
  rpc_method_handlers = {
      'Upload': grpc.unary_unary_rpc_method_handler(
          servicer.Upload,
          request_deserializer=media_dot_v1beta1_dot_MediaService__Beta1__pb2.UploadMedia.Request.FromString,
          response_serializer=media_dot_v1beta1_dot_MediaService__Beta1__pb2.UploadMedia.Response.SerializeToString,
      ),
      'Attach': grpc.unary_unary_rpc_method_handler(
          servicer.Attach,
          request_deserializer=media_dot_v1beta1_dot_MediaService__Beta1__pb2.AttachMedia.Request.FromString,
          response_serializer=google_dot_protobuf_dot_empty__pb2.Empty.SerializeToString,
      ),
  }
  generic_handler = grpc.method_handlers_generic_handler(
      'bloombox.schema.services.media.v1beta1.Media', rpc_method_handlers)
  server.add_generic_rpc_handlers((generic_handler,))
