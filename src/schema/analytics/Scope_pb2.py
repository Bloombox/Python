# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: analytics/Scope.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import bq_field_pb2 as bq__field__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='analytics/Scope.proto',
  package='bloombox.schema.analytics',
  syntax='proto3',
  serialized_pb=_b('\n\x15\x61nalytics/Scope.proto\x12\x19\x62loombox.schema.analytics\x1a\x0e\x62q_field.proto\"\xf9\x03\n\x05Scope\x12\xc8\x01\n\x07partner\x18\x01 \x01(\tB\xb6\x01\x8a@\xb2\x01Partner scope. Specifies, each-if-applicable and only in the following order-of-scope, the partner code, location code, and partner co-located device UUID that reported an event.\x12\xa0\x01\n\ncommercial\x18\x02 \x01(\tB\x8b\x01\x8a@\x87\x01\x43ommercial scope. Specifies, each-if-applicable and only in the following order-of-scope, the section name, product key, and order key.\x12\x81\x01\n\x05order\x18\x03 \x01(\tBr\x8a@oOrder scope. Specifies, only if there is an active order, the order ID that was active when the event was sent.B5\n\x1cio.bloombox.schema.telemetryB\x0e\x41nalyticsScopeH\x01P\x00\xf8\x01\x01\x62\x06proto3')
  ,
  dependencies=[bq__field__pb2.DESCRIPTOR,])




_SCOPE = _descriptor.Descriptor(
  name='Scope',
  full_name='bloombox.schema.analytics.Scope',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='partner', full_name='bloombox.schema.analytics.Scope.partner', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\262\001Partner scope. Specifies, each-if-applicable and only in the following order-of-scope, the partner code, location code, and partner co-located device UUID that reported an event.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='commercial', full_name='bloombox.schema.analytics.Scope.commercial', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\207\001Commercial scope. Specifies, each-if-applicable and only in the following order-of-scope, the section name, product key, and order key.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='order', full_name='bloombox.schema.analytics.Scope.order', index=2,
      number=3, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@oOrder scope. Specifies, only if there is an active order, the order ID that was active when the event was sent.')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=69,
  serialized_end=574,
)

DESCRIPTOR.message_types_by_name['Scope'] = _SCOPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

Scope = _reflection.GeneratedProtocolMessageType('Scope', (_message.Message,), dict(
  DESCRIPTOR = _SCOPE,
  __module__ = 'analytics.Scope_pb2'
  # @@protoc_insertion_point(class_scope:bloombox.schema.analytics.Scope)
  ))
_sym_db.RegisterMessage(Scope)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\034io.bloombox.schema.telemetryB\016AnalyticsScopeH\001P\000\370\001\001'))
_SCOPE.fields_by_name['partner'].has_options = True
_SCOPE.fields_by_name['partner']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\262\001Partner scope. Specifies, each-if-applicable and only in the following order-of-scope, the partner code, location code, and partner co-located device UUID that reported an event.'))
_SCOPE.fields_by_name['commercial'].has_options = True
_SCOPE.fields_by_name['commercial']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@\207\001Commercial scope. Specifies, each-if-applicable and only in the following order-of-scope, the section name, product key, and order key.'))
_SCOPE.fields_by_name['order'].has_options = True
_SCOPE.fields_by_name['order']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@oOrder scope. Specifies, only if there is an active order, the order ID that was active when the event was sent.'))
# @@protoc_insertion_point(module_scope)
