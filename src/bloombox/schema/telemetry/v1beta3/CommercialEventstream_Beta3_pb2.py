# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: telemetry/v1beta3/CommercialEventstream_Beta3.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf.internal import enum_type_wrapper
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


import bq_field_pb2 as bq__field__pb2
import bq_table_pb2 as bq__table__pb2
from commerce import Order_pb2 as commerce_dot_Order__pb2
from base import ProductKey_pb2 as base_dot_ProductKey__pb2
from analytics import Context_pb2 as analytics_dot_Context__pb2
from products.menu import Section_pb2 as products_dot_menu_dot_Section__pb2
from analytics.stats import OrderStats_pb2 as analytics_dot_stats_dot_OrderStats__pb2


DESCRIPTOR = _descriptor.FileDescriptor(
  name='telemetry/v1beta3/CommercialEventstream_Beta3.proto',
  package='bloombox.tables.telemetry.v1beta3',
  syntax='proto3',
  serialized_pb=_b('\n3telemetry/v1beta3/CommercialEventstream_Beta3.proto\x12!bloombox.tables.telemetry.v1beta3\x1a\x0e\x62q_field.proto\x1a\x0e\x62q_table.proto\x1a\x14\x63ommerce/Order.proto\x1a\x15\x62\x61se/ProductKey.proto\x1a\x17\x61nalytics/Context.proto\x1a\x1bproducts/menu/Section.proto\x1a analytics/stats/OrderStats.proto\"\x9b\x03\n\x11\x43ommercialSubject\x12z\n\x07section\x18\x01 \x01(\x0e\x32+.opencannabis.products.menu.section.SectionB<\x8a@9Menu section involved with a particular commercial event.\x12\x96\x01\n\x0csection_flag\x18\x02 \x03(\x0e\x32/.opencannabis.products.menu.section.SectionFlagBO\x8a@LSpecifies flags that were active on the section when the event was recorded.\x12q\n\x07product\x18\x03 \x01(\x0b\x32\x1d.opencannabis.base.ProductKeyBA\xf0?\x01\x8a@;Product ID, an opaque string that is usually autogenerated.\"\xe5\x05\n\x10\x43ommercialEvents\x12\x36\n\x04uuid\x18\x01 \x01(\tB(\xf0?\x01\x8a@\"Event UUID. Generated upon ingest.\x12\x9a\x01\n\x06timing\x18\x02 \x01(\x0b\x32(.bloombox.schema.analytics.EventPositionB`\xf0?\x01\x8a@ZTimestamps related to this event, or, the subject event\'s temporal positioning parameters.\x12\x8c\x01\n\x07\x63ontext\x18\x03 \x01(\x0b\x32\".bloombox.schema.analytics.ContextBW\xf0?\x01\x8a@QEvent context, specifying the circumstances under which this event was submitted.\x12\xc4\x01\n\x06\x61\x63tors\x18\x04 \x01(\x0b\x32&.bloombox.schema.analytics.EventActorsB\x8b\x01\xf0?\x01\x8a@\x84\x01Inflated records contextually tied to this event, such as the user, device, partner, and location that were active when it was sent.\x12\x96\x01\n\x04type\x18\x05 \x01(\x0e\x32\x36.bloombox.tables.telemetry.v1beta3.CommercialEventTypeBP\xf0?\x01\x8a@JType of commercial event being specified - an IMPRESSION, VIEW, or ACTION.:\r\xea?\ncommercial\"\x8e\x03\n\x06Orders\x12`\n\x02id\x18\x01 \x01(\tBT\xf0?\x01\x8a@NUnique order ID, generated either by the client or the server upon submission.\x12V\n\x07session\x18\x02 \x01(\tBE\xf0?\x01\x8a@?Unique session ID that was active when the order was submitted.\x12\x62\n\x05stats\x18\x03 \x01(\x0b\x32+.bloombox.schema.analytics.stats.OrderStatsB&\xf0?\x01\x8a@ Pre-calculated order statistics.\x12[\n\x05order\x18\x04 \x01(\x0b\x32\x1c.opencannabis.commerce.OrderB.\xf0?\x01\x8a@(Full payload data for the subject order.:\t\xea?\x06orders*;\n\x13\x43ommercialEventType\x12\x0e\n\nIMPRESSION\x10\x00\x12\x08\n\x04VIEW\x10\x01\x12\n\n\x06\x41\x43TION\x10\x02\x42Q\n+io.bloombox.schema.tables.telemetry.v1beta3B\x1b\x43ommercialEventstream_Beta3H\x01P\x00\xf8\x01\x01\x62\x06proto3')
  ,
  dependencies=[bq__field__pb2.DESCRIPTOR,bq__table__pb2.DESCRIPTOR,commerce_dot_Order__pb2.DESCRIPTOR,base_dot_ProductKey__pb2.DESCRIPTOR,analytics_dot_Context__pb2.DESCRIPTOR,products_dot_menu_dot_Section__pb2.DESCRIPTOR,analytics_dot_stats_dot_OrderStats__pb2.DESCRIPTOR,])

_COMMERCIALEVENTTYPE = _descriptor.EnumDescriptor(
  name='CommercialEventType',
  full_name='bloombox.tables.telemetry.v1beta3.CommercialEventType',
  filename=None,
  file=DESCRIPTOR,
  values=[
    _descriptor.EnumValueDescriptor(
      name='IMPRESSION', index=0, number=0,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='VIEW', index=1, number=1,
      options=None,
      type=None),
    _descriptor.EnumValueDescriptor(
      name='ACTION', index=2, number=2,
      options=None,
      type=None),
  ],
  containing_type=None,
  options=None,
  serialized_start=1814,
  serialized_end=1873,
)
_sym_db.RegisterEnumDescriptor(_COMMERCIALEVENTTYPE)

CommercialEventType = enum_type_wrapper.EnumTypeWrapper(_COMMERCIALEVENTTYPE)
IMPRESSION = 0
VIEW = 1
ACTION = 2



_COMMERCIALSUBJECT = _descriptor.Descriptor(
  name='CommercialSubject',
  full_name='bloombox.tables.telemetry.v1beta3.CommercialSubject',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='section', full_name='bloombox.tables.telemetry.v1beta3.CommercialSubject.section', index=0,
      number=1, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@9Menu section involved with a particular commercial event.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='section_flag', full_name='bloombox.tables.telemetry.v1beta3.CommercialSubject.section_flag', index=1,
      number=2, type=14, cpp_type=8, label=3,
      has_default_value=False, default_value=[],
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@LSpecifies flags that were active on the section when the event was recorded.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='product', full_name='bloombox.tables.telemetry.v1beta3.CommercialSubject.product', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@;Product ID, an opaque string that is usually autogenerated.')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=256,
  serialized_end=667,
)


_COMMERCIALEVENTS = _descriptor.Descriptor(
  name='CommercialEvents',
  full_name='bloombox.tables.telemetry.v1beta3.CommercialEvents',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='uuid', full_name='bloombox.tables.telemetry.v1beta3.CommercialEvents.uuid', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@\"Event UUID. Generated upon ingest.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='timing', full_name='bloombox.tables.telemetry.v1beta3.CommercialEvents.timing', index=1,
      number=2, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@ZTimestamps related to this event, or, the subject event\'s temporal positioning parameters.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='context', full_name='bloombox.tables.telemetry.v1beta3.CommercialEvents.context', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@QEvent context, specifying the circumstances under which this event was submitted.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='actors', full_name='bloombox.tables.telemetry.v1beta3.CommercialEvents.actors', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@\204\001Inflated records contextually tied to this event, such as the user, device, partner, and location that were active when it was sent.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='type', full_name='bloombox.tables.telemetry.v1beta3.CommercialEvents.type', index=4,
      number=5, type=14, cpp_type=8, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@JType of commercial event being specified - an IMPRESSION, VIEW, or ACTION.')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\352?\ncommercial')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=670,
  serialized_end=1411,
)


_ORDERS = _descriptor.Descriptor(
  name='Orders',
  full_name='bloombox.tables.telemetry.v1beta3.Orders',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='id', full_name='bloombox.tables.telemetry.v1beta3.Orders.id', index=0,
      number=1, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@NUnique order ID, generated either by the client or the server upon submission.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='session', full_name='bloombox.tables.telemetry.v1beta3.Orders.session', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@?Unique session ID that was active when the order was submitted.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='stats', full_name='bloombox.tables.telemetry.v1beta3.Orders.stats', index=2,
      number=3, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@ Pre-calculated order statistics.')), file=DESCRIPTOR),
    _descriptor.FieldDescriptor(
      name='order', full_name='bloombox.tables.telemetry.v1beta3.Orders.order', index=3,
      number=4, type=11, cpp_type=10, label=1,
      has_default_value=False, default_value=None,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=_descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@(Full payload data for the subject order.')), file=DESCRIPTOR),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=_descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\352?\006orders')),
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=1414,
  serialized_end=1812,
)

_COMMERCIALSUBJECT.fields_by_name['section'].enum_type = products_dot_menu_dot_Section__pb2._SECTION
_COMMERCIALSUBJECT.fields_by_name['section_flag'].enum_type = products_dot_menu_dot_Section__pb2._SECTIONFLAG
_COMMERCIALSUBJECT.fields_by_name['product'].message_type = base_dot_ProductKey__pb2._PRODUCTKEY
_COMMERCIALEVENTS.fields_by_name['timing'].message_type = analytics_dot_Context__pb2._EVENTPOSITION
_COMMERCIALEVENTS.fields_by_name['context'].message_type = analytics_dot_Context__pb2._CONTEXT
_COMMERCIALEVENTS.fields_by_name['actors'].message_type = analytics_dot_Context__pb2._EVENTACTORS
_COMMERCIALEVENTS.fields_by_name['type'].enum_type = _COMMERCIALEVENTTYPE
_ORDERS.fields_by_name['stats'].message_type = analytics_dot_stats_dot_OrderStats__pb2._ORDERSTATS
_ORDERS.fields_by_name['order'].message_type = commerce_dot_Order__pb2._ORDER
DESCRIPTOR.message_types_by_name['CommercialSubject'] = _COMMERCIALSUBJECT
DESCRIPTOR.message_types_by_name['CommercialEvents'] = _COMMERCIALEVENTS
DESCRIPTOR.message_types_by_name['Orders'] = _ORDERS
DESCRIPTOR.enum_types_by_name['CommercialEventType'] = _COMMERCIALEVENTTYPE
_sym_db.RegisterFileDescriptor(DESCRIPTOR)

CommercialSubject = _reflection.GeneratedProtocolMessageType('CommercialSubject', (_message.Message,), dict(
  DESCRIPTOR = _COMMERCIALSUBJECT,
  __module__ = 'telemetry.v1beta3.CommercialEventstream_Beta3_pb2'
  # @@protoc_insertion_point(class_scope:bloombox.tables.telemetry.v1beta3.CommercialSubject)
  ))
_sym_db.RegisterMessage(CommercialSubject)

CommercialEvents = _reflection.GeneratedProtocolMessageType('CommercialEvents', (_message.Message,), dict(
  DESCRIPTOR = _COMMERCIALEVENTS,
  __module__ = 'telemetry.v1beta3.CommercialEventstream_Beta3_pb2'
  # @@protoc_insertion_point(class_scope:bloombox.tables.telemetry.v1beta3.CommercialEvents)
  ))
_sym_db.RegisterMessage(CommercialEvents)

Orders = _reflection.GeneratedProtocolMessageType('Orders', (_message.Message,), dict(
  DESCRIPTOR = _ORDERS,
  __module__ = 'telemetry.v1beta3.CommercialEventstream_Beta3_pb2'
  # @@protoc_insertion_point(class_scope:bloombox.tables.telemetry.v1beta3.Orders)
  ))
_sym_db.RegisterMessage(Orders)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n+io.bloombox.schema.tables.telemetry.v1beta3B\033CommercialEventstream_Beta3H\001P\000\370\001\001'))
_COMMERCIALSUBJECT.fields_by_name['section'].has_options = True
_COMMERCIALSUBJECT.fields_by_name['section']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@9Menu section involved with a particular commercial event.'))
_COMMERCIALSUBJECT.fields_by_name['section_flag'].has_options = True
_COMMERCIALSUBJECT.fields_by_name['section_flag']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\212@LSpecifies flags that were active on the section when the event was recorded.'))
_COMMERCIALSUBJECT.fields_by_name['product'].has_options = True
_COMMERCIALSUBJECT.fields_by_name['product']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@;Product ID, an opaque string that is usually autogenerated.'))
_COMMERCIALEVENTS.fields_by_name['uuid'].has_options = True
_COMMERCIALEVENTS.fields_by_name['uuid']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@\"Event UUID. Generated upon ingest.'))
_COMMERCIALEVENTS.fields_by_name['timing'].has_options = True
_COMMERCIALEVENTS.fields_by_name['timing']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@ZTimestamps related to this event, or, the subject event\'s temporal positioning parameters.'))
_COMMERCIALEVENTS.fields_by_name['context'].has_options = True
_COMMERCIALEVENTS.fields_by_name['context']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@QEvent context, specifying the circumstances under which this event was submitted.'))
_COMMERCIALEVENTS.fields_by_name['actors'].has_options = True
_COMMERCIALEVENTS.fields_by_name['actors']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@\204\001Inflated records contextually tied to this event, such as the user, device, partner, and location that were active when it was sent.'))
_COMMERCIALEVENTS.fields_by_name['type'].has_options = True
_COMMERCIALEVENTS.fields_by_name['type']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@JType of commercial event being specified - an IMPRESSION, VIEW, or ACTION.'))
_COMMERCIALEVENTS.has_options = True
_COMMERCIALEVENTS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\352?\ncommercial'))
_ORDERS.fields_by_name['id'].has_options = True
_ORDERS.fields_by_name['id']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@NUnique order ID, generated either by the client or the server upon submission.'))
_ORDERS.fields_by_name['session'].has_options = True
_ORDERS.fields_by_name['session']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@?Unique session ID that was active when the order was submitted.'))
_ORDERS.fields_by_name['stats'].has_options = True
_ORDERS.fields_by_name['stats']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@ Pre-calculated order statistics.'))
_ORDERS.fields_by_name['order'].has_options = True
_ORDERS.fields_by_name['order']._options = _descriptor._ParseOptions(descriptor_pb2.FieldOptions(), _b('\360?\001\212@(Full payload data for the subject order.'))
_ORDERS.has_options = True
_ORDERS._options = _descriptor._ParseOptions(descriptor_pb2.MessageOptions(), _b('\352?\006orders'))
# @@protoc_insertion_point(module_scope)
